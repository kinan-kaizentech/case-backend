openapi: 3.0.0
info:
  title: Turkish Recipe API
  version: 1.0.0
  description: Simple REST API for Turkish recipes

servers:
  - url: /
    description: API Server

paths:
  /api/auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with email, password, name, and optional birthday
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  minLength: 6
                  description: User's password (minimum 6 characters)
                  example: "password123"
                name:
                  type: string
                  description: User's full name
                  example: "John Doe"
                birthday:
                  type: string
                  format: date
                  description: User's birthday in YYYY-MM-DD format (optional)
                  example: "1990-01-15"
      responses:
        201:
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  email: "user@example.com"
                  name: "John Doe"
                  birthday: "1990-01-15"
                  createdAt: "2025-10-01T10:30:00.000Z"
                  updatedAt: "2025-10-01T10:30:00.000Z"
                message: "User registered successfully"
        400:
          description: Bad request - validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              examples:
                missingFields:
                  value:
                    message: "Missing required fields: email, password, and name are required"
                invalidEmail:
                  value:
                    message: "Invalid email format"
                shortPassword:
                  value:
                    message: "Password must be at least 6 characters long"
                invalidBirthday:
                  value:
                    message: "Birthday must be in YYYY-MM-DD format"
        409:
          description: Conflict - email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Email already exists"
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticates a user with email and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  description: User's email address
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  description: User's password
                  example: "password123"
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
              example:
                user:
                  id: "550e8400-e29b-41d4-a716-446655440000"
                  email: "user@example.com"
                  name: "John Doe"
                  birthday: "1990-01-15"
                  createdAt: "2025-10-01T10:30:00.000Z"
                  updatedAt: "2025-10-01T10:30:00.000Z"
                message: "Login successful"
        400:
          description: Bad request - missing credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Email and password are required"
        401:
          description: Unauthorized - invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid email or password"
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/auth/profile/{userId}:
    get:
      summary: Get user profile
      description: Retrieves user profile information by UUID
      tags:
        - Authentication
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
          description: User's UUID
          example: "550e8400-e29b-41d4-a716-446655440000"
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
              example:
                id: "550e8400-e29b-41d4-a716-446655440000"
                email: "user@example.com"
                name: "John Doe"
                birthday: "1990-01-15"
                createdAt: "2025-10-01T10:30:00.000Z"
                updatedAt: "2025-10-01T10:30:00.000Z"
        400:
          description: Bad request - invalid user ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "Invalid user ID format"
        404:
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: "User not found"
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/recipes:
    get:
      summary: Get all recipes
      description: Returns a list of recipes. Can be filtered by category and searched by keyword.
      parameters:
        - in: query
          name: categoryId
          schema:
            type: string
          description: Filter recipes by category ID (e.g., main-course, soup, dessert)
          example: "main-course"
        - in: query
          name: keyword
          schema:
            type: string
          description: Search recipes by name or description
          example: "mercimek"
      responses:
        200:
          description: List of recipes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecipeListItem'
                example: [
                  {
                    "id": 1,
                    "name": "Karnıyarık",
                    "description": "Patlıcan içine kıymalı harç konularak yapılan geleneksel Türk yemeği",
                    "categoryId": "main-course",
                    "category": "Ana Yemek",
                    "cookTime": 45,
                    "calories": 320,
                    "image": "https://case-backend.vercel.app/images/karniyarik.jpg"
                  },
                  {
                    "id": 2,
                    "name": "Mercimek Çorbası",
                    "description": "Kırmızı mercimek ile yapılan besleyici ve lezzetli çorba",
                    "categoryId": "soup",
                    "category": "Çorba",
                    "cookTime": 30,
                    "calories": 180,
                    "image": "https://case-backend.vercel.app/images/mercimek.jpg"
                  }
                ]
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/recipes/{id}:
    get:
      summary: Get recipe by ID
      description: Returns detailed information about a specific recipe
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: Recipe ID
          example: 1
      responses:
        200:
          description: Recipe details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Recipe'
                example:
                  id: 1
                  name: "Karnıyarık"
                  description: "Patlıcan içine kıymalı harç konularak yapılan geleneksel Türk yemeği"
                  categoryId: "main-course"
                  cookTime: 45
                  calories: 320
                  image: "https://case-backend.vercel.app/images/karniyarik.jpg"
                  ingredients: [
                    { name: "Patlıcan", amount: 4, unit: "adet" },
                    { name: "Kıyma", amount: 400, unit: "gram" },
                    { name: "Soğan", amount: 2, unit: "adet" },
                    { name: "Domates", amount: 2, unit: "adet" },
                    { name: "Yeşil biber", amount: 4, unit: "adet" },
                    { name: "Sarımsak", amount: 3, unit: "diş" },
                    { name: "Zeytinyağı", amount: 100, unit: "ml" },
                    { name: "Tuz", amount: 1, unit: "tatlı kaşığı" },
                    { name: "Karabiber", amount: 1, unit: "çay kaşığı" }
                  ]
                  instructions: [
                    "Patlıcanları alacalı soyup tuzlu suda bekletin",
                    "Kıymalı harcı hazırlayın: Soğanları yemeklik doğrayıp kıyma ile kavurun",
                    "Domates, biber ve baharatları ekleyip pişirin",
                    "Patlıcanları kızartın ve ortalarını yarın",
                    "İçlerine kıymalı harç doldurun",
                    "180 derece fırında 25-30 dakika pişirin"
                  ]
                  nutrition:
                    calories: 320
                    protein: 18
                    carbohydrates: 24
                    fat: 15
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /api/categories:
    get:
      summary: Get all categories
      description: Returns a list of all recipe categories
      responses:
        200:
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
                example: [
                  {
                    "id": "main-course",
                    "name": "Ana Yemek",
                    "description": "Türk mutfağının ana yemekleri"
                  },
                  {
                    "id": "soup",
                    "name": "Çorba",
                    "description": "Geleneksel Türk çorbaları"
                  }
                ]
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Recipe:
      type: object
      required: [id, name, description, categoryId, cookTime, calories, image, ingredients, instructions, nutrition]
      properties:
        id:
          type: integer
          description: Unique identifier for the recipe
        name:
          type: string
          description: Recipe name in Turkish
        description:
          type: string
          description: Brief description of the recipe in Turkish
        categoryId:
          type: string
          description: Category identifier
        cookTime:
          type: integer
          description: Cooking time in minutes
        calories:
          type: integer
          description: Calories per serving
        image:
          type: string
          description: URL to recipe image
        ingredients:
          type: array
          description: List of ingredients
          items:
            $ref: '#/components/schemas/Ingredient'
        instructions:
          type: array
          description: Step by step cooking instructions in Turkish
          items:
            type: string
        nutrition:
          $ref: '#/components/schemas/Nutrition'
          description: Nutritional information per serving

    RecipeListItem:
      type: object
      required: [id, name, description, categoryId, category, cookTime, calories, image]
      properties:
        id:
          type: integer
          description: Unique identifier for the recipe
        name:
          type: string
          description: Recipe name in Turkish
        description:
          type: string
          description: Brief description of the recipe in Turkish
        categoryId:
          type: string
          description: Category identifier
        category:
          type: string
          description: Category name in Turkish
        cookTime:
          type: integer
          description: Cooking time in minutes
        calories:
          type: integer
          description: Calories per serving
        image:
          type: string
          description: URL to recipe image

    Category:
      type: object
      required: [id, name, description]
      properties:
        id:
          type: string
          description: Unique identifier for the category
        name:
          type: string
          description: Category name in Turkish
        description:
          type: string
          description: Category description in Turkish

    Ingredient:
      type: object
      required: [name, amount, unit]
      properties:
        name:
          type: string
          description: Ingredient name in Turkish
        amount:
          type: number
          description: Amount of ingredient
        unit:
          type: string
          description: Unit of measurement in Turkish

    Nutrition:
      type: object
      required: [calories, protein, carbohydrates, fat]
      properties:
        calories:
          type: number
          description: Calories per serving
        protein:
          type: number
          description: Protein content in grams
        carbohydrates:
          type: number
          description: Carbohydrate content in grams
        fat:
          type: number
          description: Fat content in grams

    UserProfile:
      type: object
      required: [id, email, name, createdAt, updatedAt]
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier (UUID v4)
        email:
          type: string
          format: email
          description: User's email address
        name:
          type: string
          description: User's full name
        birthday:
          type: string
          format: date
          description: User's birthday in YYYY-MM-DD format (optional)
        createdAt:
          type: string
          format: date-time
          description: Account creation timestamp (ISO 8601)
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp (ISO 8601)

    AuthResponse:
      type: object
      required: [user, message]
      properties:
        user:
          $ref: '#/components/schemas/UserProfile'
        message:
          type: string
          description: Success message

    Error:
      type: object
      required: [message]
      properties:
        message:
          type: string
          description: Error message
        error:
          type: string
          description: Detailed error information (if available)

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Invalid recipe ID"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Recipe not found"

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            message: "Internal server error"
            error: "Unexpected error occurred"